<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/controller/robot/RobotCommandController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/controller/robot/RobotCommandController.java" />
              <option name="originalContent" value="package com.smartlab.zippy.controller.robot;&#10;&#10;import com.smartlab.zippy.model.dto.web.request.robot.LoadCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.request.robot.MoveCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.request.robot.PickupCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.response.ApiResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.LoadCommandResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.MoveCommandResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.PickupCommandResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.StatusResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.ContainerStatusResponse;&#10;import com.smartlab.zippy.model.dto.robot.RobotStatusDTO;&#10;import com.smartlab.zippy.model.dto.robot.RobotContainerStatusDTO;&#10;import com.smartlab.zippy.model.entity.Robot;&#10;import com.smartlab.zippy.model.entity.RobotContainer;&#10;import com.smartlab.zippy.repository.RobotRepository;&#10;import com.smartlab.zippy.repository.RobotContainerRepository;&#10;import com.smartlab.zippy.service.robot.RobotCommandService;&#10;import com.smartlab.zippy.service.robot.RobotDataService;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/robot/command&quot;)&#10;public class RobotCommandController {&#10;&#10;    private final RobotCommandService commandService;&#10;    private final RobotDataService robotDataService;&#10;    private final RobotRepository robotRepository;&#10;    private final RobotContainerRepository robotContainerRepository;&#10;&#10;    public RobotCommandController(RobotCommandService commandService,&#10;                                RobotDataService robotDataService,&#10;                                RobotRepository robotRepository,&#10;                                RobotContainerRepository robotContainerRepository) {&#10;        this.commandService = commandService;&#10;        this.robotDataService = robotDataService;&#10;        this.robotRepository = robotRepository;&#10;        this.robotContainerRepository = robotContainerRepository;&#10;    }&#10;&#10;    /**&#10;     * Request status from all robots and return free robots with free containers&#10;     * Flow: API call -&gt; Send command to all robots -&gt; Robots respond via status topic -&gt; Return free robots&#10;     *&#10;     * @return List of free robots with their container statuses&#10;     */&#10;    @PostMapping(&quot;/request-status&quot;)&#10;    @Transactional(readOnly = true)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; requestStatusFromAllRobots() {&#10;        try {&#10;            // Get all robots from database&#10;            List&lt;Robot&gt; allRobots = (List&lt;Robot&gt;) robotRepository.findAll();&#10;            List&lt;String&gt; commandsSent = new ArrayList&lt;&gt;();&#10;&#10;            // Send status request command to each robot&#10;            for (Robot robot : allRobots) {&#10;                try {&#10;                    commandService.requestStatus(robot.getCode());&#10;                    commandsSent.add(robot.getCode());&#10;                } catch (Exception e) {&#10;                    // Log error but continue with other robots&#10;                    System.err.println(&quot;Failed to send status request to robot &quot; + robot.getCode() + &quot;: &quot; + e.getMessage());&#10;                }&#10;            }&#10;&#10;            // Wait a moment for robots to respond (robots will send data to status topic)&#10;            Thread.sleep(2000); // 2 seconds wait for responses&#10;&#10;            // Collect free robots and their container statuses&#10;            List&lt;Map&lt;String, Object&gt;&gt; freeRobots = new ArrayList&lt;&gt;();&#10;&#10;            for (Robot robot : allRobots) {&#10;                // Check if robot is online and get its status&#10;                if (robotDataService.isRobotOnline(robot.getCode())) {&#10;                    Optional&lt;RobotStatusDTO&gt; statusOpt = robotDataService.getStatus(robot.getCode());&#10;&#10;                    if (statusOpt.isPresent()) {&#10;                        RobotStatusDTO status = statusOpt.get();&#10;&#10;                        // Check if robot is free (assuming &quot;idle&quot; or &quot;free&quot; status means available)&#10;                        if (&quot;free&quot;.equalsIgnoreCase(status.getStatus())) {&#10;&#10;                            Map&lt;String, Object&gt; robotInfo = new HashMap&lt;&gt;();&#10;                            robotInfo.put(&quot;robotCode&quot;, robot.getCode());&#10;                            robotInfo.put(&quot;status&quot;, status.getStatus());&#10;                            robotInfo.put(&quot;online&quot;, true);&#10;&#10;                            // Get container statuses for this robot using repository query to avoid lazy loading&#10;                            List&lt;RobotContainer&gt; containers = robotContainerRepository.findByRobotCode(robot.getCode());&#10;                            List&lt;Map&lt;String, Object&gt;&gt; freeContainers = new ArrayList&lt;&gt;();&#10;&#10;                            for (RobotContainer container : containers) {&#10;                                Optional&lt;RobotContainerStatusDTO&gt; containerStatusOpt =&#10;                                    robotDataService.getContainerStatus(robot.getCode(), container.getContainerCode());&#10;&#10;                                if (containerStatusOpt.isPresent()) {&#10;                                    RobotContainerStatusDTO containerStatus = containerStatusOpt.get();&#10;&#10;                                    // Check if container is free&#10;                                    if (&quot;free&quot;.equalsIgnoreCase(containerStatus.getStatus())) {&#10;&#10;                                        Map&lt;String, Object&gt; containerInfo = new HashMap&lt;&gt;();&#10;                                        containerInfo.put(&quot;containerCode&quot;, container.getContainerCode());&#10;                                        containerInfo.put(&quot;status&quot;, containerStatus.getStatus());&#10;                                        freeContainers.add(containerInfo);&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            robotInfo.put(&quot;freeContainers&quot;, freeContainers);&#10;                            robotInfo.put(&quot;totalFreeContainers&quot;, freeContainers.size());&#10;&#10;                            // Only add robot if it has free containers or if we want all free robots&#10;                            if (!freeContainers.isEmpty()) {&#10;                                freeRobots.add(robotInfo);&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Prepare response&#10;            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;commandsSent&quot;, commandsSent.size());&#10;            response.put(&quot;robotsRequested&quot;, commandsSent);&#10;            response.put(&quot;freeRobotsCount&quot;, freeRobots.size());&#10;            response.put(&quot;freeRobots&quot;, freeRobots);&#10;            response.put(&quot;message&quot;, &quot;Status request sent to &quot; + commandsSent.size() + &quot; robots, found &quot; + freeRobots.size() + &quot; free robots&quot;);&#10;&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to request status from robots: &quot; + e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send move command to robot&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param request Move command request&#10;     * @return Move command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/move&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;MoveCommandResponse&gt;&gt; move(&#10;            @PathVariable String robotCode,&#10;            @RequestBody MoveCommandRequest request&#10;    ) {&#10;        try {&#10;            commandService.sendMove(robotCode, request.getLat(), request.getLon(), request.getRoomCode());&#10;            MoveCommandResponse response = new MoveCommandResponse(&#10;                    robotCode,&#10;                    request.getLat(),&#10;                    request.getLon(),&#10;                    &quot;Move command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send move command to robot &quot; + robotCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send pickup command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param request Pickup command request&#10;     * @return Pickup command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/pickup&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PickupCommandResponse&gt;&gt; sendPickupCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @RequestBody PickupCommandRequest request) {&#10;        try {&#10;            commandService.sendPickup(robotCode, containerCode, request.isPickup());&#10;            PickupCommandResponse response = new PickupCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isPickup(),&#10;                    &quot;Pickup command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send pickup command to robot &quot; + robotCode + &quot; container &quot; + containerCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send load command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param request Load command request&#10;     * @return Load command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/load&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;LoadCommandResponse&gt;&gt; sendLoadCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @RequestBody LoadCommandRequest request) {&#10;        try {&#10;            commandService.sendLoad(robotCode, containerCode, request.isLoad());&#10;            LoadCommandResponse response = new LoadCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isLoad(),&#10;                    &quot;Load command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send load command to robot &quot; + robotCode + &quot; container &quot; + containerCode&#10;            ));&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.controller.robot;&#10;&#10;import com.smartlab.zippy.model.dto.web.request.robot.LoadCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.request.robot.MoveCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.request.robot.PickupCommandRequest;&#10;import com.smartlab.zippy.model.dto.web.response.ApiResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.LoadCommandResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.MoveCommandResponse;&#10;import com.smartlab.zippy.model.dto.web.response.robot.PickupCommandResponse;&#10;import com.smartlab.zippy.model.dto.robot.RobotStatusDTO;&#10;import com.smartlab.zippy.model.dto.robot.RobotContainerStatusDTO;&#10;import com.smartlab.zippy.model.entity.Robot;&#10;import com.smartlab.zippy.model.entity.RobotContainer;&#10;import com.smartlab.zippy.repository.RobotRepository;&#10;import com.smartlab.zippy.repository.RobotContainerRepository;&#10;import com.smartlab.zippy.service.robot.RobotCommandService;&#10;import com.smartlab.zippy.service.robot.RobotDataService;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.ArrayList;&#10;import java.util.Map;&#10;import java.util.HashMap;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/robot/command&quot;)&#10;public class RobotCommandController {&#10;&#10;    private final RobotCommandService commandService;&#10;    private final RobotDataService robotDataService;&#10;    private final RobotRepository robotRepository;&#10;    private final RobotContainerRepository robotContainerRepository;&#10;&#10;    public RobotCommandController(RobotCommandService commandService,&#10;                                RobotDataService robotDataService,&#10;                                RobotRepository robotRepository,&#10;                                RobotContainerRepository robotContainerRepository) {&#10;        this.commandService = commandService;&#10;        this.robotDataService = robotDataService;&#10;        this.robotRepository = robotRepository;&#10;        this.robotContainerRepository = robotContainerRepository;&#10;    }&#10;&#10;    /**&#10;     * Request status from all robots and return free robots with free containers&#10;     * Flow: API call -&gt; Send command to all robots -&gt; Robots respond via status topic -&gt; Return free robots&#10;     *&#10;     * @return List of free robots with their container statuses&#10;     */&#10;    @PostMapping(&quot;/request-status&quot;)&#10;    @Transactional(readOnly = true)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; requestStatusFromAllRobots() {&#10;        try {&#10;            // Get all robots from database&#10;            List&lt;Robot&gt; allRobots = (List&lt;Robot&gt;) robotRepository.findAll();&#10;            List&lt;String&gt; commandsSent = new ArrayList&lt;&gt;();&#10;&#10;            // Send status request command to each robot&#10;            for (Robot robot : allRobots) {&#10;                try {&#10;                    commandService.requestStatus(robot.getCode());&#10;                    commandsSent.add(robot.getCode());&#10;                } catch (Exception e) {&#10;                    // Log error but continue with other robots&#10;                    System.err.println(&quot;Failed to send status request to robot &quot; + robot.getCode() + &quot;: &quot; + e.getMessage());&#10;                }&#10;            }&#10;&#10;            // Wait a moment for robots to respond (robots will send data to status topic)&#10;            Thread.sleep(2000); // 2 seconds wait for responses&#10;&#10;            // Collect free robots and their container statuses&#10;            List&lt;Map&lt;String, Object&gt;&gt; freeRobots = new ArrayList&lt;&gt;();&#10;&#10;            for (Robot robot : allRobots) {&#10;                // Check if robot is online and get its status&#10;                if (robotDataService.isRobotOnline(robot.getCode())) {&#10;                    Optional&lt;RobotStatusDTO&gt; statusOpt = robotDataService.getStatus(robot.getCode());&#10;&#10;                    if (statusOpt.isPresent()) {&#10;                        RobotStatusDTO status = statusOpt.get();&#10;&#10;                        // Check if robot is free (assuming &quot;idle&quot; or &quot;free&quot; status means available)&#10;                        if (&quot;free&quot;.equalsIgnoreCase(status.getStatus())) {&#10;&#10;                            Map&lt;String, Object&gt; robotInfo = new HashMap&lt;&gt;();&#10;                            robotInfo.put(&quot;robotCode&quot;, robot.getCode());&#10;                            robotInfo.put(&quot;status&quot;, status.getStatus());&#10;                            robotInfo.put(&quot;online&quot;, true);&#10;&#10;                            // Get container statuses for this robot using repository query to avoid lazy loading&#10;                            List&lt;RobotContainer&gt; containers = robotContainerRepository.findByRobotCode(robot.getCode());&#10;                            List&lt;Map&lt;String, Object&gt;&gt; freeContainers = new ArrayList&lt;&gt;();&#10;&#10;                            for (RobotContainer container : containers) {&#10;                                Optional&lt;RobotContainerStatusDTO&gt; containerStatusOpt =&#10;                                    robotDataService.getContainerStatus(robot.getCode(), container.getContainerCode());&#10;&#10;                                if (containerStatusOpt.isPresent()) {&#10;                                    RobotContainerStatusDTO containerStatus = containerStatusOpt.get();&#10;&#10;                                    // Check if container is free&#10;                                    if (&quot;free&quot;.equalsIgnoreCase(containerStatus.getStatus())) {&#10;&#10;                                        Map&lt;String, Object&gt; containerInfo = new HashMap&lt;&gt;();&#10;                                        containerInfo.put(&quot;containerCode&quot;, container.getContainerCode());&#10;                                        containerInfo.put(&quot;status&quot;, containerStatus.getStatus());&#10;                                        freeContainers.add(containerInfo);&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            robotInfo.put(&quot;freeContainers&quot;, freeContainers);&#10;                            robotInfo.put(&quot;totalFreeContainers&quot;, freeContainers.size());&#10;&#10;                            // Only add robot if it has free containers or if we want all free robots&#10;                            if (!freeContainers.isEmpty()) {&#10;                                freeRobots.add(robotInfo);&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Prepare response&#10;            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();&#10;            response.put(&quot;commandsSent&quot;, commandsSent.size());&#10;            response.put(&quot;robotsRequested&quot;, commandsSent);&#10;            response.put(&quot;freeRobotsCount&quot;, freeRobots.size());&#10;            response.put(&quot;freeRobots&quot;, freeRobots);&#10;            response.put(&quot;message&quot;, &quot;Status request sent to &quot; + commandsSent.size() + &quot; robots, found &quot; + freeRobots.size() + &quot; free robots&quot;);&#10;&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to request status from robots: &quot; + e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send move command to robot&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param request Move command request&#10;     * @return Move command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/move&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;MoveCommandResponse&gt;&gt; move(&#10;            @PathVariable String robotCode,&#10;            @RequestBody MoveCommandRequest request&#10;    ) {&#10;        try {&#10;            commandService.sendMove(robotCode, request.getLat(), request.getLon(), request.getRoomCode());&#10;            MoveCommandResponse response = new MoveCommandResponse(&#10;                    robotCode,&#10;                    request.getLat(),&#10;                    request.getLon(),&#10;                    &quot;Move command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send move command to robot &quot; + robotCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send trip-based move command to robot&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param tripCode Trip Code&#10;     * @param request Move command request&#10;     * @return Move command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/trip/{tripCode}/move&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;MoveCommandResponse&gt;&gt; moveWithTrip(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String tripCode,&#10;            @RequestBody MoveCommandRequest request&#10;    ) {&#10;        try {&#10;            commandService.sendTripMove(robotCode, tripCode, request.getLat(), request.getLon(), request.getRoomCode());&#10;            MoveCommandResponse response = new MoveCommandResponse(&#10;                    robotCode,&#10;                    request.getLat(),&#10;                    request.getLon(),&#10;                    &quot;Trip move command sent successfully for trip: &quot; + tripCode&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send trip move command to robot &quot; + robotCode + &quot; for trip &quot; + tripCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send pickup command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param request Pickup command request&#10;     * @return Pickup command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/pickup&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PickupCommandResponse&gt;&gt; sendPickupCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @RequestBody PickupCommandRequest request) {&#10;        try {&#10;            commandService.sendPickup(robotCode, containerCode, request.isPickup());&#10;            PickupCommandResponse response = new PickupCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isPickup(),&#10;                    &quot;Pickup command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send pickup command to robot &quot; + robotCode + &quot; container &quot; + containerCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send trip-based pickup command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param tripCode Trip Code&#10;     * @param request Pickup command request&#10;     * @return Pickup command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/trip/{tripCode}/pickup&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PickupCommandResponse&gt;&gt; sendTripPickupCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @PathVariable String tripCode,&#10;            @RequestBody PickupCommandRequest request) {&#10;        try {&#10;            commandService.sendTripPickup(robotCode, containerCode, tripCode, request.isPickup());&#10;            PickupCommandResponse response = new PickupCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isPickup(),&#10;                    &quot;Trip pickup command sent successfully for trip: &quot; + tripCode&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send trip pickup command to robot &quot; + robotCode + &quot; container &quot; + containerCode + &quot; for trip &quot; + tripCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send load command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param request Load command request&#10;     * @return Load command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/load&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;LoadCommandResponse&gt;&gt; sendLoadCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @RequestBody LoadCommandRequest request) {&#10;        try {&#10;            commandService.sendLoad(robotCode, containerCode, request.isLoad());&#10;            LoadCommandResponse response = new LoadCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isLoad(),&#10;                    &quot;Load command sent successfully&quot;&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send load command to robot &quot; + robotCode + &quot; container &quot; + containerCode&#10;            ));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Send trip-based load command to robot container&#10;     *&#10;     * @param robotCode Robot ID&#10;     * @param containerCode Container Code&#10;     * @param tripCode Trip Code&#10;     * @param request Load command request&#10;     * @return Load command response&#10;     */&#10;    @PostMapping(&quot;/{robotCode}/container/{containerCode}/trip/{tripCode}/load&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;LoadCommandResponse&gt;&gt; sendTripLoadCommand(&#10;            @PathVariable String robotCode,&#10;            @PathVariable String containerCode,&#10;            @PathVariable String tripCode,&#10;            @RequestBody LoadCommandRequest request) {&#10;        try {&#10;            commandService.sendTripLoad(robotCode, containerCode, tripCode, request.isLoad());&#10;            LoadCommandResponse response = new LoadCommandResponse(&#10;                    robotCode,&#10;                    containerCode,&#10;                    request.isLoad(),&#10;                    &quot;Trip load command sent successfully for trip: &quot; + tripCode&#10;            );&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error(&#10;                &quot;Failed to send trip load command to robot &quot; + robotCode + &quot; container &quot; + containerCode + &quot; for trip &quot; + tripCode&#10;            ));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/dto/web/request/order/PickupVerifyOtpRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/dto/web/request/order/PickupVerifyOtpRequest.java" />
              <option name="originalContent" value="package com.smartlab.zippy.model.dto.web.request.order;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PickupVerifyOtpRequest {&#10;    &#10;    @NotBlank(message = &quot;Order code is required&quot;)&#10;    private String orderCode;&#10;    &#10;    @NotBlank(message = &quot;OTP is required&quot;)&#10;    @Pattern(regexp = &quot;^[0-9]{6}$&quot;, message = &quot;OTP must be 6 digits&quot;)&#10;    private String otp;&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.model.dto.web.request.order;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Pattern;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class PickupVerifyOtpRequest {&#10;    &#10;    @NotBlank(message = &quot;Order code is required&quot;)&#10;    private String orderCode;&#10;    &#10;    @NotBlank(message = &quot;OTP is required&quot;)&#10;    @Pattern(regexp = &quot;^[0-9]{6}$&quot;, message = &quot;OTP must be 6 digits&quot;)&#10;    private String otp;&#10;    &#10;    @NotBlank(message = &quot;Trip code is required&quot;)&#10;    private String tripCode;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/dto/web/response/trip/TripResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/dto/web/response/trip/TripResponse.java" />
              <option name="originalContent" value="package com.smartlab.zippy.model.dto.web.response.trip;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class TripResponse {&#10;    private UUID userId;&#10;    private UUID robotId;&#10;    private String robotCode;&#10;    private LocalDateTime startTime;&#10;    private LocalDateTime endTime;&#10;    private LocalDateTime startTime;&#10;    private LocalDateTime endTime;&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.model.dto.web.response.trip;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class TripResponse {&#10;    private UUID userId;&#10;    private UUID robotId;&#10;    private String robotCode;&#10;    private String tripCode;&#10;    private LocalDateTime startTime;&#10;    private LocalDateTime endTime;&#10;    private String status;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/entity/RobotContainer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/entity/RobotContainer.java" />
              <option name="originalContent" value="package com.smartlab.zippy.model.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;@Entity&#10;@Table(name = &quot;robot_container&quot;)&#10;public class RobotContainer {&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    &#10;    private UUID robotId;&#10;    @Column(name = &quot;container_code&quot;, unique = true)&#10;&#10;    &#10;    @JoinColumn(name = &quot;robot_id&quot;, insertable = false, updatable = false)&#10;    private Robot robot;&#10;    &#10;    @OneToMany(mappedBy = &quot;container&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Product&gt; products;&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.model.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import lombok.ToString;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;robot_container&quot;)&#10;@ToString(exclude = {&quot;robot&quot;, &quot;products&quot;}) // Exclude circular reference fields&#10;public class RobotContainer {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;    &#10;    @Column(name = &quot;robot_id&quot;)&#10;    private UUID robotId;&#10;&#10;    @Column(name = &quot;container_code&quot;, unique = true)&#10;    private String containerCode;&#10;&#10;    private String status;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;robot_id&quot;, insertable = false, updatable = false)&#10;    private Robot robot;&#10;    &#10;    @OneToMany(mappedBy = &quot;container&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Product&gt; products;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/entity/Trip.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/model/entity/Trip.java" />
              <option name="originalContent" value="package com.smartlab.zippy.model.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;trip&quot;)&#10;public class Trip {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.UUID)&#10;    private UUID id;&#10;    &#10;    @Column(name = &quot;robot_id&quot;)&#10;    private UUID robotId;&#10;    &#10;    private String status;&#10;&#10;    @Column(name = &quot;start_time&quot;)&#10;    private LocalDateTime startTime;&#10;&#10;    @Column(name = &quot;end_time&quot;)&#10;    private LocalDateTime endTime;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, insertable = false, updatable = false)&#10;    private User user;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;robot_id&quot;, insertable = false, updatable = false)&#10;    private Robot robot;&#10;    &#10;    @OneToMany(mappedBy = &quot;trip&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Order&gt; orders;&#10;    &#10;    @OneToMany(mappedBy = &quot;trip&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Product&gt; products;&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.model.entity;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Entity&#10;@Table(name = &quot;trip&quot;)&#10;public class Trip {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.UUID)&#10;    private UUID id;&#10;    &#10;    @Column(name = &quot;trip_code&quot;, unique = true)&#10;    private String tripCode;&#10;&#10;    @Column(name = &quot;start_point&quot;)&#10;    private String startPoint;&#10;&#10;    @Column(name = &quot;end_point&quot;)&#10;    private String endPoint;&#10;    &#10;    @Column(name = &quot;user_id&quot;)&#10;    private UUID userId;&#10;    &#10;    @Column(name = &quot;robot_id&quot;)&#10;    private UUID robotId;&#10;    &#10;    private String status;&#10;&#10;    @Column(name = &quot;start_time&quot;)&#10;    private LocalDateTime startTime;&#10;&#10;    @Column(name = &quot;end_time&quot;)&#10;    private LocalDateTime endTime;&#10;&#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;user_id&quot;, insertable = false, updatable = false)&#10;    private User user;&#10;    &#10;    @ManyToOne(fetch = FetchType.LAZY)&#10;    @JoinColumn(name = &quot;robot_id&quot;, insertable = false, updatable = false)&#10;    private Robot robot;&#10;    &#10;    @OneToMany(mappedBy = &quot;trip&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Order&gt; orders;&#10;    &#10;    @OneToMany(mappedBy = &quot;trip&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Product&gt; products;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/OrderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/OrderRepository.java" />
              <option name="originalContent" value="package com.smartlab.zippy.repository;&#10;&#10;import com.smartlab.zippy.model.entity.Order;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.CrudRepository;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface OrderRepository extends CrudRepository&lt;Order, UUID&gt; {&#10;    List&lt;Order&gt; findByTripId(UUID tripId);&#10;    List&lt;Order&gt; findByStatus(String status);&#10;    Optional&lt;Order&gt; findByOrderCode(String orderCode);&#10;&#10;    @Query(&quot;SELECT o FROM Order o &quot; +&#10;           &quot;JOIN User u ON o.userId = u.id &quot; +&#10;           &quot;WHERE u.username = :username &quot; +&#10;           &quot;ORDER BY o.createdAt DESC&quot;)&#10;    List&lt;Order&gt; findByUsername(@Param(&quot;username&quot;) String username);&#10;}&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.repository;&#10;&#10;import com.smartlab.zippy.model.entity.Order;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.CrudRepository;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface OrderRepository extends CrudRepository&lt;Order, UUID&gt; {&#10;    List&lt;Order&gt; findByTripId(UUID tripId);&#10;    List&lt;Order&gt; findByStatus(String status);&#10;    Optional&lt;Order&gt; findByOrderCode(String orderCode);&#10;&#10;    @Query(&quot;SELECT o FROM Order o &quot; +&#10;           &quot;JOIN User u ON o.userId = u.id &quot; +&#10;           &quot;WHERE u.username = :username &quot; +&#10;           &quot;ORDER BY o.createdAt DESC&quot;)&#10;    List&lt;Order&gt; findByUsername(@Param(&quot;username&quot;) String username);&#10;&#10;    @Query(&quot;SELECT o FROM Order o &quot; +&#10;           &quot;JOIN o.trip t &quot; +&#10;           &quot;WHERE t.tripCode = :tripCode&quot;)&#10;    List&lt;Order&gt; findByTripCode(@Param(&quot;tripCode&quot;) String tripCode);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/RobotContainerRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/RobotContainerRepository.java" />
              <option name="originalContent" value="package com.smartlab.zippy.repository;&#10;&#10;import com.smartlab.zippy.model.entity.RobotContainer;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.CrudRepository;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface RobotContainerRepository extends CrudRepository&lt;RobotContainer, Long&gt; {&#10;    List&lt;RobotContainer&gt; findByRobotId(UUID robotId);&#10;    List&lt;RobotContainer&gt; findByStatus(String status);&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.repository;&#10;&#10;import com.smartlab.zippy.model.entity.RobotContainer;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.CrudRepository;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface RobotContainerRepository extends CrudRepository&lt;RobotContainer, Long&gt; {&#10;    List&lt;RobotContainer&gt; findByRobotId(UUID robotId);&#10;    List&lt;RobotContainer&gt; findByStatus(String status);&#10;    Optional&lt;RobotContainer&gt; findByContainerCode(String containerCode);&#10;&#10;    @Query(&quot;SELECT rc FROM RobotContainer rc JOIN rc.robot r WHERE r.code = :robotCode AND rc.containerCode = :containerCode&quot;)&#10;    Optional&lt;RobotContainer&gt; findByRobotCodeAndContainerCode(@Param(&quot;robotCode&quot;) String robotCode, @Param(&quot;containerCode&quot;) String containerCode);&#10;&#10;    @Query(&quot;SELECT rc FROM RobotContainer rc JOIN rc.robot r WHERE r.code = :robotCode&quot;)&#10;    List&lt;RobotContainer&gt; findByRobotCode(@Param(&quot;robotCode&quot;) String robotCode);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/repository/UserRepository.java" />
              <option name="updatedContent" value="package com.smartlab.zippy.repository;&#10;&#10;import com.smartlab.zippy.model.entity.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface UserRepository extends JpaRepository&lt;User, UUID&gt; {&#10;    &#10;    Optional&lt;User&gt; findByEmail(String email);&#10;    &#10;    Optional&lt;User&gt; findByUsername(String username);&#10;    &#10;    boolean existsByEmail(String email);&#10;    &#10;    boolean existsByUsername(String username);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/service/robot/RobotCommandService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/service/robot/RobotCommandService.java" />
              <option name="originalContent" value="package com.smartlab.zippy.service.robot;&#10;&#10;import com.smartlab.zippy.interfaces.MqttCommandPublisher;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class RobotCommandService {&#10;&#10;    private final MqttCommandPublisher publisher;&#10;&#10;    public RobotCommandService(MqttCommandPublisher publisher) {&#10;        this.publisher = publisher;&#10;    }&#10;&#10;    public void sendMove(String robotId, double lat, double lon, String roomCode) {&#10;        String topic = String.format(&quot;robot/%s/command/move&quot;, robotId);&#10;        String payload = String.format(&quot;{\&quot;lat\&quot;:%.6f,\&quot;lon\&quot;:%.6f,\&quot;roomCode\&quot;:\&quot;%s\&quot;}&quot;, lat, lon, roomCode);&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendPickup(String robotId, String containerCode, boolean pickup) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/pickup&quot;, robotId, containerCode);&#10;        String payload = pickup ? &quot;1&quot; : &quot;0&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendLoad(String robotId, String containerCode, boolean load) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/load&quot;, robotId, containerCode);&#10;        String payload = load ? &quot;true&quot; : &quot;false&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void requestStatus(String robotId) {&#10;        String topic = String.format(&quot;robot/%s/command/request-status&quot;, robotId);&#10;        String payload = &quot;{\&quot;action\&quot;:\&quot;request_status\&quot;}&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.service.robot;&#10;&#10;import com.smartlab.zippy.interfaces.MqttCommandPublisher;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;public class RobotCommandService {&#10;&#10;    private final MqttCommandPublisher publisher;&#10;&#10;    public RobotCommandService(MqttCommandPublisher publisher) {&#10;        this.publisher = publisher;&#10;    }&#10;&#10;    public void sendMove(String robotId, double lat, double lon, String roomCode) {&#10;        String topic = String.format(&quot;robot/%s/command/move&quot;, robotId);&#10;        String payload = String.format(&quot;{\&quot;lat\&quot;:%.6f,\&quot;lon\&quot;:%.6f,\&quot;roomCode\&quot;:\&quot;%s\&quot;}&quot;, lat, lon, roomCode);&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendPickup(String robotId, String containerCode, boolean pickup) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/pickup&quot;, robotId, containerCode);&#10;        String payload = pickup ? &quot;1&quot; : &quot;0&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendLoad(String robotId, String containerCode, boolean load) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/load&quot;, robotId, containerCode);&#10;        String payload = load ? &quot;true&quot; : &quot;false&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void requestStatus(String robotId) {&#10;        String topic = String.format(&quot;robot/%s/command/request-status&quot;, robotId);&#10;        String payload = &quot;{\&quot;action\&quot;:\&quot;request_status\&quot;}&quot;;&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    // Trip-based command methods&#10;    public void sendTripMove(String robotId, String tripCode, double lat, double lon, String roomCode) {&#10;        String topic = String.format(&quot;robot/%s/command/trip/%s/move&quot;, robotId, tripCode);&#10;        String payload = String.format(&quot;{\&quot;tripCode\&quot;:\&quot;%s\&quot;,\&quot;lat\&quot;:%.6f,\&quot;lon\&quot;:%.6f,\&quot;roomCode\&quot;:\&quot;%s\&quot;}&quot;, tripCode, lat, lon, roomCode);&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendTripPickup(String robotId, String containerCode, String tripCode, boolean pickup) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/trip/%s/pickup&quot;, robotId, containerCode, tripCode);&#10;        String payload = String.format(&quot;{\&quot;tripCode\&quot;:\&quot;%s\&quot;,\&quot;pickup\&quot;:%s}&quot;, tripCode, pickup ? &quot;true&quot; : &quot;false&quot;);&#10;        publisher.publish(payload, topic);&#10;    }&#10;&#10;    public void sendTripLoad(String robotId, String containerCode, String tripCode, boolean load) {&#10;        String topic = String.format(&quot;robot/%s/container/%s/command/trip/%s/load&quot;, robotId, containerCode, tripCode);&#10;        String payload = String.format(&quot;{\&quot;tripCode\&quot;:\&quot;%s\&quot;,\&quot;load\&quot;:%s}&quot;, tripCode, load ? &quot;true&quot; : &quot;false&quot;);&#10;        publisher.publish(payload, topic);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/service/trip/TripCodeGenerator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/service/trip/TripCodeGenerator.java" />
              <option name="updatedContent" value="package com.smartlab.zippy.service.trip;&#10;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.security.SecureRandom;&#10;&#10;@Service&#10;public class TripCodeGenerator {&#10;    &#10;    private static final String PREFIX = &quot;T-&quot;;&#10;    private static final int CODE_LENGTH = 6;&#10;    private static final SecureRandom random = new SecureRandom();&#10;    &#10;    public String generateTripCode() {&#10;        StringBuilder codeBuilder = new StringBuilder(PREFIX);&#10;        &#10;        for (int i = 0; i &lt; CODE_LENGTH; i++) {&#10;            codeBuilder.append(random.nextInt(10));&#10;        }&#10;        &#10;        return codeBuilder.toString();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>