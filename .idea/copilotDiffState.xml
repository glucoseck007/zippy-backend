<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/controller/payment/PaymentController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/smartlab/zippy/controller/payment/PaymentController.java" />
              <option name="originalContent" value="package com.smartlab.zippy.controller.payment;&#10;&#10;import com.smartlab.zippy.model.dto.web.response.ApiResponse;&#10;import com.smartlab.zippy.model.dto.web.response.payment.PaymentDTO;&#10;import com.smartlab.zippy.model.dto.web.response.payment.PaymentLinkResponse;&#10;import com.smartlab.zippy.model.entity.Order;&#10;import com.smartlab.zippy.model.entity.Payment;&#10;import com.smartlab.zippy.service.payment.PayOSService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.*;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/payment&quot;)&#10;@RequiredArgsConstructor&#10;public class PaymentController {&#10;&#10;    private final PayOSService payOSService;&#10;&#10;    /**&#10;     * Create a payment link for an order&#10;     * @param orderId The ID of the order to create a payment for&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/create/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createPayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Creating payment for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.createPaymentLink(orderId);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Webhook endpoint for PayOS to notify about payment status changes&#10;     * @param payload The payload sent by PayOS&#10;     * @return Success response if webhook processed successfully&#10;     */&#10;    @PostMapping(&quot;/webhook&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; paymentWebhook(@RequestBody Map&lt;String, Object&gt; payload) {&#10;        try {&#10;            log.info(&quot;Received payment webhook: {}&quot;, payload);&#10;&#10;            // Extract payment ID from the payload&#10;            if (payload.containsKey(&quot;paymentLinkId&quot;)) {&#10;                String paymentLinkId = payload.get(&quot;paymentLinkId&quot;).toString();&#10;                boolean verified = payOSService.verifyPayment(paymentLinkId);&#10;&#10;                if (verified) {&#10;                    return ResponseEntity.ok(&#10;                            ApiResponse.success(&quot;Payment verified successfully&quot;)&#10;                    );&#10;                } else {&#10;                    return ResponseEntity.ok(&#10;                            ApiResponse.success(&quot;Payment verification pending&quot;)&#10;                    );&#10;                }&#10;            }&#10;&#10;            return ResponseEntity.badRequest()&#10;                    .body(ApiResponse.error(&quot;Invalid webhook payload&quot;));&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing payment webhook: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to process payment webhook: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Endpoint to manually verify a payment status&#10;     * @param paymentLinkId The payment link ID from PayOS&#10;     * @return Success response if payment verified&#10;     */&#10;    @GetMapping(&quot;/verify/{paymentLinkId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; verifyPayment(@PathVariable String paymentLinkId) {&#10;        try {&#10;            log.info(&quot;Manually verifying payment: {}&quot;, paymentLinkId);&#10;            boolean verified = payOSService.verifyPayment(paymentLinkId);&#10;&#10;            if (verified) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(&quot;Payment verified successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.error(&quot;Payment verification failed&quot;)&#10;                );&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error verifying payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to verify payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Create a payment link for a mobile app&#10;     * @param orderId The ID of the order to create a payment for&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/mobile/create/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createMobilePayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Creating mobile payment for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.createPaymentLinkForMobile(orderId);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Mobile payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating mobile payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create mobile payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Endpoint for mobile clients to check payment status after redirection&#10;     * @param orderId The order ID to verify payment for&#10;     * @return Status of the payment&#10;     */&#10;    @GetMapping(&quot;/mobile/status/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getMobilePaymentStatus(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Checking payment status for order ID: {}&quot;, orderId);&#10;&#10;            // Use the new getPaymentStatus method that calls PayOS API&#10;            Map&lt;String, Object&gt; response = payOSService.getPaymentStatus(orderId);&#10;&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error checking payment status: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to check payment status: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cancel a payment for an order&#10;     * @param orderId The ID of the order to cancel payment for&#10;     * @return Success response if payment was cancelled successfully&#10;     */&#10;    @DeleteMapping(&quot;/mobile/cancel/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; cancelMobilePayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Cancelling payment for order ID: {}&quot;, orderId);&#10;            boolean cancelled = payOSService.cancelPayment(orderId);&#10;&#10;            if (cancelled) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(&quot;Payment cancelled successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.error(&quot;No payment found to cancel or cancellation failed&quot;)&#10;                );&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error cancelling payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to cancel payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get existing payment link for an order or create a new one&#10;     * @param orderId The ID of the order&#10;     * @param forceNew If true, will cancel any existing payment and create a new one&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/mobile/create/{orderId}/force-new&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createMobilePaymentForceNew(&#10;            @PathVariable UUID orderId,&#10;            @RequestParam(defaultValue = &quot;true&quot;) boolean forceNew) {&#10;        try {&#10;            log.info(&quot;Creating mobile payment for order ID: {}, forceNew: {}&quot;, orderId, forceNew);&#10;            PaymentLinkResponse response = payOSService.createPaymentLinkForMobile(orderId, forceNew);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Mobile payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating mobile payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create mobile payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get existing payment link for an order without creating a new one if it exists&#10;     * @param orderId The ID of the order&#10;     * @return Existing payment link information or error if none exists&#10;     */&#10;    @GetMapping(&quot;/mobile/get/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; getMobilePaymentLink(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Getting existing payment link for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.getExistingPaymentLink(orderId);&#10;&#10;            if (response != null) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(response, &quot;Existing payment link retrieved successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                        .body(ApiResponse.error(&quot;No existing payment link found for this order&quot;));&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error getting payment link: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to get payment link: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.smartlab.zippy.controller.payment;&#10;&#10;import com.smartlab.zippy.model.dto.web.response.ApiResponse;&#10;import com.smartlab.zippy.model.dto.web.response.payment.PaymentDTO;&#10;import com.smartlab.zippy.model.dto.web.response.payment.PaymentLinkResponse;&#10;import com.smartlab.zippy.model.entity.Order;&#10;import com.smartlab.zippy.model.entity.Payment;&#10;import com.smartlab.zippy.service.payment.PayOSService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.*;&#10;&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/payment&quot;)&#10;@RequiredArgsConstructor&#10;public class PaymentController {&#10;&#10;    private final PayOSService payOSService;&#10;&#10;    /**&#10;     * Create a payment link for an order&#10;     * @param orderId The ID of the order to create a payment for&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/create/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createPayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Creating payment for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.createPaymentLink(orderId);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Webhook endpoint for PayOS to notify about payment status changes&#10;     * @param payload The payload sent by PayOS&#10;     * @return Success response if webhook processed successfully&#10;     */&#10;    @PostMapping(&quot;/webhook&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; paymentWebhook(@RequestBody Map&lt;String, Object&gt; payload) {&#10;        try {&#10;            log.info(&quot;Received payment webhook: {}&quot;, payload);&#10;&#10;            // Extract payment ID from the payload&#10;            if (payload.containsKey(&quot;paymentLinkId&quot;)) {&#10;                String paymentLinkId = payload.get(&quot;paymentLinkId&quot;).toString();&#10;                boolean verified = payOSService.verifyPayment(paymentLinkId);&#10;&#10;                if (verified) {&#10;                    return ResponseEntity.ok(&#10;                            ApiResponse.success(&quot;Payment verified successfully&quot;)&#10;                    );&#10;                } else {&#10;                    return ResponseEntity.ok(&#10;                            ApiResponse.success(&quot;Payment verification pending&quot;)&#10;                    );&#10;                }&#10;            }&#10;&#10;            return ResponseEntity.badRequest()&#10;                    .body(ApiResponse.error(&quot;Invalid webhook payload&quot;));&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error processing payment webhook: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to process payment webhook: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Endpoint to manually verify a payment status&#10;     * @param paymentLinkId The payment link ID from PayOS&#10;     * @return Success response if payment verified&#10;     */&#10;    @GetMapping(&quot;/verify/{paymentLinkId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; verifyPayment(@PathVariable String paymentLinkId) {&#10;        try {&#10;            log.info(&quot;Manually verifying payment: {}&quot;, paymentLinkId);&#10;            boolean verified = payOSService.verifyPayment(paymentLinkId);&#10;&#10;            if (verified) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(&quot;Payment verified successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.error(&quot;Payment verification failed&quot;)&#10;                );&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error verifying payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to verify payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Create a payment link for a mobile app&#10;     * @param orderId The ID of the order to create a payment for&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/mobile/create/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createMobilePayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Creating mobile payment for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.createPaymentLinkForMobile(orderId);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Mobile payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating mobile payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create mobile payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Endpoint for mobile clients to check payment status after redirection&#10;     * @param orderId The order ID to verify payment for&#10;     * @return Status of the payment&#10;     */&#10;    @GetMapping(&quot;/mobile/status/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Map&lt;String, Object&gt;&gt;&gt; getMobilePaymentStatus(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Checking payment status for order ID: {}&quot;, orderId);&#10;&#10;            // Use the new getPaymentStatus method that calls PayOS API&#10;            Map&lt;String, Object&gt; response = payOSService.getPaymentStatus(orderId);&#10;&#10;            return ResponseEntity.ok(ApiResponse.success(response));&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error checking payment status: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to check payment status: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Cancel a payment for an order&#10;     * @param orderId The ID of the order to cancel payment for&#10;     * @return Success response if payment was cancelled successfully&#10;     */&#10;    @DeleteMapping(&quot;/mobile/cancel/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;String&gt;&gt; cancelMobilePayment(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Cancelling payment for order ID: {}&quot;, orderId);&#10;            boolean cancelled = payOSService.cancelPayment(orderId);&#10;&#10;            if (cancelled) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(&quot;Payment cancelled successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.error(&quot;No payment found to cancel or cancellation failed&quot;)&#10;                );&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error cancelling payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to cancel payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get existing payment link for an order or create a new one&#10;     * @param orderId The ID of the order&#10;     * @param forceNew If true, will cancel any existing payment and create a new one&#10;     * @return Payment link information including checkout URL&#10;     */&#10;    @PostMapping(&quot;/mobile/create/{orderId}/force-new&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; createMobilePaymentForceNew(&#10;            @PathVariable UUID orderId,&#10;            @RequestParam(defaultValue = &quot;true&quot;) boolean forceNew) {&#10;        try {&#10;            log.info(&quot;Creating mobile payment for order ID: {}, forceNew: {}&quot;, orderId, forceNew);&#10;            PaymentLinkResponse response = payOSService.createPaymentLinkForMobile(orderId, forceNew);&#10;&#10;            return ResponseEntity.ok(&#10;                    ApiResponse.success(response, &quot;Mobile payment link created successfully&quot;)&#10;            );&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error creating mobile payment: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to create mobile payment: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get existing payment link for an order without creating a new one if it exists&#10;     * @param orderId The ID of the order&#10;     * @return Existing payment link information or error if none exists&#10;     */&#10;    @GetMapping(&quot;/mobile/get/{orderId}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PaymentLinkResponse&gt;&gt; getMobilePaymentLink(@PathVariable UUID orderId) {&#10;        try {&#10;            log.info(&quot;Getting existing payment link for order ID: {}&quot;, orderId);&#10;            PaymentLinkResponse response = payOSService.getExistingPaymentLink(orderId);&#10;&#10;            if (response != null) {&#10;                return ResponseEntity.ok(&#10;                        ApiResponse.success(response, &quot;Existing payment link retrieved successfully&quot;)&#10;                );&#10;            } else {&#10;                return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                        .body(ApiResponse.error(&quot;No existing payment link found for this order&quot;));&#10;            }&#10;        } catch (Exception e) {&#10;            log.error(&quot;Error getting payment link: {}&quot;, e.getMessage(), e);&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(ApiResponse.error(&quot;Failed to get payment link: &quot; + e.getMessage()));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>